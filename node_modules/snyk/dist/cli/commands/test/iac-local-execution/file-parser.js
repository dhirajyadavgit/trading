"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFiles = void 0;
const hclToJson = require("hcl-to-json");
const YAML = require("js-yaml");
const types_1 = require("./types");
const REQUIRED_K8S_FIELDS = ['apiVersion', 'kind', 'metadata'];
async function parseFiles(filesData) {
    const parsedFiles = [];
    const failedFiles = [];
    for (const fileData of filesData) {
        try {
            parsedFiles.push(...tryParseIacFile(fileData));
        }
        catch (err) {
            if (filesData.length === 1)
                throw err;
            failedFiles.push(generateFailedParsedFile(fileData, err));
        }
    }
    return {
        parsedFiles,
        failedFiles,
    };
}
exports.parseFiles = parseFiles;
function generateFailedParsedFile({ fileType, filePath, fileContent }, err) {
    return {
        err,
        failureReason: err.message,
        fileType,
        filePath,
        fileContent,
        engineType: null,
        jsonContent: null,
    };
}
function tryParseIacFile(fileData) {
    switch (fileData.fileType) {
        case 'yaml':
        case 'yml':
        case 'json':
            return tryParsingKubernetesFile(fileData);
        case 'tf':
            return tryParsingTerraformFile(fileData);
        default:
            throw new Error('Invalid IaC file');
    }
}
function tryParsingKubernetesFile(fileData) {
    const yamlDocuments = YAML.safeLoadAll(fileData.fileContent);
    return yamlDocuments.map((parsedYamlDocument, docId) => {
        if (REQUIRED_K8S_FIELDS.every((requiredField) => parsedYamlDocument.hasOwnProperty(requiredField))) {
            return Object.assign(Object.assign({}, fileData), { jsonContent: parsedYamlDocument, engineType: types_1.EngineType.Kubernetes, docId });
        }
        else {
            throw new Error('Invalid K8s File!');
        }
    });
}
function tryParsingTerraformFile(fileData) {
    try {
        // TODO: This parser does not fail on inavlid Terraform files! it is here temporarily.
        // cloud-config team will replace it to a valid parser for the beta release.
        const parsedData = hclToJson(fileData.fileContent);
        return [
            Object.assign(Object.assign({}, fileData), { jsonContent: parsedData, engineType: types_1.EngineType.Terraform }),
        ];
    }
    catch (err) {
        throw new Error('Invalid Terraform File!');
    }
}
//# sourceMappingURL=file-parser.js.map