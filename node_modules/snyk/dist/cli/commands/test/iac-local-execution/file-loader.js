"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFiles = void 0;
const makeDirectoryIterator_1 = require("../../../../lib/iac/makeDirectoryIterator");
const fs = require("fs");
const util = require("util");
const types_1 = require("./types");
const iac_parser_1 = require("../../../../lib/iac/iac-parser");
const detect_1 = require("../../../../lib/detect");
const loadFileContents = util.promisify(fs.readFile);
const DEFAULT_ENCODING = 'utf-8';
async function loadFiles(pathToScan) {
    let filePaths = [pathToScan];
    if (detect_1.isLocalFolder(pathToScan)) {
        filePaths = await getFilePathsFromDirectory(pathToScan);
    }
    const filesToScan = [];
    for (const filePath of filePaths) {
        const fileData = await tryLoadFileData(filePath);
        if (fileData)
            filesToScan.push(fileData);
    }
    if (filesToScan.length === 0) {
        throw Error("Couldn't find valid IaC files");
    }
    return filesToScan;
}
exports.loadFiles = loadFiles;
function getFilePathsFromDirectory(pathToScan) {
    const directoryPaths = makeDirectoryIterator_1.makeDirectoryIterator(pathToScan);
    const directoryFilePaths = [];
    for (const filePath of directoryPaths) {
        directoryFilePaths.push(filePath);
    }
    return directoryFilePaths;
}
async function tryLoadFileData(pathToScan) {
    const fileType = iac_parser_1.getFileType(pathToScan);
    if (!types_1.VALID_FILE_TYPES.includes(fileType)) {
        return null;
    }
    return {
        filePath: pathToScan,
        fileType: fileType,
        fileContent: await loadFileContents(pathToScan, DEFAULT_ENCODING),
    };
}
//# sourceMappingURL=file-loader.js.map