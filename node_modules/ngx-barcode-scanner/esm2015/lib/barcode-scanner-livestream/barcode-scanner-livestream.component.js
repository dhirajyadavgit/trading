import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import Quagga from '@ericblade/quagga2';
import defaultsDeep from 'lodash.defaultsdeep';
import { DEFAULT_CONFIG } from './barcode-scanner-livestream.config';
import { mapToReader } from './barcode-types';
export class BarcodeScannerLivestreamComponent {
    constructor() {
        this.maxWidth = '100%';
        // Outputs
        this.valueChanges = new EventEmitter();
        this.started = new EventEmitter();
        this._started = false;
    }
    get _maxWidth() {
        return this.maxWidth ? `${this.maxWidth}` : 'auto';
    }
    get _maxHeight() {
        return this.maxHeight ? `${this.maxHeight}` : 'auto';
    }
    get isStarted() {
        return this._started;
    }
    ngOnDestroy() {
        this.stop();
    }
    ngOnChanges(changes) {
        this.restart();
    }
    _init() {
        return new Promise((resolve, reject) => {
            Quagga.onProcessed((result) => this.onProcessed(result));
            Quagga.onDetected((result) => this.onDetected(result));
            this.configQuagga = defaultsDeep({}, this.config, DEFAULT_CONFIG);
            this.configQuagga.inputStream.target = this.barcodeScanner.nativeElement;
            if (this.type) {
                this.configQuagga.decoder.readers = mapToReader(this.type);
            }
            if (this.deviceId) {
                this.configQuagga.inputStream.constraints.deviceId = this.deviceId;
            }
            Quagga.init(this.configQuagga, (err) => {
                if (err) {
                    console.log(err);
                    return reject(err);
                }
                resolve();
            });
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._started) {
                yield this._init();
                Quagga.start();
                this._started = true;
                this.started.next(true);
            }
        });
    }
    stop() {
        if (this._started) {
            Quagga.stop();
            this._started = false;
            this.started.next(false);
        }
    }
    restart() {
        if (this._started) {
            this.stop();
            this.start();
        }
    }
    onProcessed(result) {
        const drawingCtx = Quagga.canvas.ctx.overlay;
        const drawingCanvas = Quagga.canvas.dom.overlay;
        if (result) {
            if (result.boxes) {
                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width'), 10), parseInt(drawingCanvas.getAttribute('height'), 10));
                result.boxes.filter((box) => {
                    return box !== result.box;
                }).forEach((box) => {
                    Quagga.ImageDebug.drawPath(box, {
                        x: 0,
                        y: 1,
                    }, drawingCtx, {
                        color: 'green',
                        lineWidth: 2,
                    });
                });
            }
            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, {
                    x: 0,
                    y: 1,
                }, drawingCtx, {
                    color: '#00F',
                    lineWidth: 2,
                });
            }
            if (result.codeResult && result.codeResult.code) {
                Quagga.ImageDebug.drawPath(result.line, {
                    x: 'x',
                    y: 'y',
                }, drawingCtx, {
                    color: 'red',
                    lineWidth: 3,
                });
            }
        }
    }
    onDetected(result) {
        this.valueChanges.next(result);
    }
}
BarcodeScannerLivestreamComponent.decorators = [
    { type: Component, args: [{
                selector: 'barcode-scanner-livestream',
                template: "<div\n  #BarcodeScanner\n  class=\"scanner\"\n  [hidden]=\"!isStarted\"\n  [style.max-height]=\"_maxHeight\"\n  [style.max-width]=\"_maxWidth\"\n>\n  <video [style.max-height]=\"_maxHeight\" [style.max-width]=\"_maxWidth\"></video>\n  <canvas\n    [style.max-height]=\"_maxHeight\"\n    [style.max-width]=\"_maxWidth\"\n    class=\"drawingBuffer\"\n  ></canvas>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".scanner{position:relative}.scanner canvas,.scanner video{height:100%;width:100%}.scanner canvas.drawingBuffer{left:0;position:absolute;top:0}"]
            },] }
];
BarcodeScannerLivestreamComponent.propDecorators = {
    type: [{ type: Input }],
    deviceId: [{ type: Input }],
    maxWidth: [{ type: Input }],
    maxHeight: [{ type: Input }],
    config: [{ type: Input }],
    valueChanges: [{ type: Output }],
    started: [{ type: Output }],
    barcodeScanner: [{ type: ViewChild, args: ['BarcodeScanner',] }]
};
//# sourceMappingURL=data:application/json;base64,